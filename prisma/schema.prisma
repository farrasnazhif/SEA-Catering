// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String        @default("NO_NAME")
  email         String        @unique(map: "user_email_idx")
  emailVerified DateTime?     @db.Timestamp(6)
  image         String?
  password      String?
  role          String        @default("user")
  address       String?
  phone         String?
  allergies     String[]      @default([])
  subscription  Json[]        @default([])
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  updatedAt     DateTime      @updatedAt
  account       Account[]
  session       Session[]
  Testimonial   Testimonial[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Product {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String        @unique(map: "product_slug_idx")
  images      String[]
  description String
  stock       Int
  price       Float         @default(0)
  rating      Float         @default(0)
  numReviews  Int           @default(0)
  isFeatured  Boolean
  banner      String?
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  Testimonial Testimonial[]
}

model Testimonial {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
